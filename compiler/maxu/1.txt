CONSTTK const
INTTK int
IDENFR a0
ASSIGN =
MINU -
INTCON 32
SEMICN ;
CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
PLUS +
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR bb
ASSIGN =
CHARCON a
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
CHARTK char
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR e
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR abs
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
MINU -
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR charToDigit
LPARENT (
CHARTK char
IDENFR x
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR pp
ASSIGN =
INTCON 19
SEMICN ;
RETURNTK return
LPARENT (
IDENFR x
MINU -
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR testChar
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR e
ASSIGN =
INTCON 188
COMMA ,
IDENFR t
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR f
ASSIGN =
CHARCON 6
COMMA ,
IDENFR l
ASSIGN =
CHARCON s
SEMICN ;
INTTK int
IDENFR g
COMMA ,
IDENFR m
SEMICN ;
CHARTK char
IDENFR h
COMMA ,
IDENFR n
SEMICN ;
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR h
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR g
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR charToDigit
LPARENT (
IDENFR h
RPARENT )
SEMICN ;
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON 3
SEMICN ;
IDENFR g
ASSIGN =
IDENFR m
SEMICN ;
IDENFR m
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
MULT *
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
PLUS +
IDENFR h
PLUS +
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON \n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON helloworld\n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
COMMA ,
IDENFR h
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
