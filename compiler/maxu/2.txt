CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR compare
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
ELSETK else
RETURNTK return
LPARENT (
MINU -
INTCON 1
PLUS +
INTCON 3
MULT *
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR compare
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR i
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR j
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
