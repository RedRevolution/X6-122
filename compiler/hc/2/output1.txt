CONSTTK const
INTTK int
IDENFR coni1
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR coni2
ASSIGN =
MINU -
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR coni3
ASSIGN =
PLUS +
INTCON 5
SEMICN ;
CONSTTK const
CHARTK char
IDENFR plus
ASSIGN =
CHARCON +
SEMICN ;
CONSTTK const
CHARTK char
IDENFR minus
ASSIGN =
CHARCON -
SEMICN ;
CONSTTK const
CHARTK char
IDENFR multiply
ASSIGN =
CHARCON *
SEMICN ;
CONSTTK const
CHARTK char
IDENFR div
ASSIGN =
CHARCON /
SEMICN ;
CONSTTK const
CHARTK char
IDENFR num
ASSIGN =
CHARCON 1
SEMICN ;
INTTK int
IDENFR integer1
SEMICN ;
INTTK int
IDENFR integer2
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR char2
SEMICN ;
CHARTK char
IDENFR array2
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR AplusB
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR tempc
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR tempc2
ASSIGN =
INTCON 2
SEMICN ;
RETURNTK return
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR writeArray
LPARENT (
CHARTK char
IDENFR c1
COMMA ,
CHARTK char
IDENFR c2
RPARENT )
LBRACE {
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR c1
SEMICN ;
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR c2
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR wtf
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR coni1
EQL ==
IDENFR coni2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON coni1 = coni2
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR coni1
NEQ !=
IDENFR coni2
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR integer1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR integer1
COMMA ,
IDENFR integer2
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON plus is %c\n
COMMA ,
IDENFR plus
RPARENT )
SEMICN ;
RBRACE }
IDENFR integer1
ASSIGN =
INTCON 1
PLUS +
INTCON 5
SEMICN ;
WHILETK while
LPARENT (
IDENFR integer1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON %d\n
COMMA ,
IDENFR integer1
RPARENT )
SEMICN ;
IDENFR integer1
ASSIGN =
IDENFR integer1
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR integer1
ASSIGN =
PLUS +
INTCON 2
SEMICN ;
DOTK do
LBRACE {
PRINTFTK printf
LPARENT (
STRCON yes
RPARENT )
SEMICN ;
IDENFR integer1
ASSIGN =
IDENFR integer1
MINU -
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR integer1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR integer1
ASSIGN =
INTCON 9
SEMICN ;
IDENFR integer1
GRE >
INTCON 0
SEMICN ;
IDENFR integer1
ASSIGN =
IDENFR integer1
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
PLUS +
INTCON 2
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR integer1
ASSIGN =
MINU -
INTCON 8
SEMICN ;
IDENFR integer1
SEMICN ;
IDENFR integer1
ASSIGN =
IDENFR integer1
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON no
RPARENT )
SEMICN ;
RBRACE }
SCANFTK scanf
LPARENT (
IDENFR char2
RPARENT )
SEMICN ;
IDENFR integer1
ASSIGN =
IDENFR AplusB
LPARENT (
IDENFR coni1
COMMA ,
IDENFR coni2
RPARENT )
SEMICN ;
IDENFR writeArray
LPARENT (
IDENFR plus
COMMA ,
IDENFR div
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
PLUS +
INTCON 1
MULT *
INTCON 3
DIV /
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
MINU -
INTCON 1
MULT *
PLUS +
INTCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
INTCON 1
DIV /
MINU -
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
PLUS +
INTCON 1
MINU -
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
MINU -
INTCON 1
PLUS +
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
INTCON 1
MINU -
INTCON 2
PLUS +
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR wtf
LPARENT (
IDENFR char2
RPARENT )
SEMICN ;
RBRACE }
